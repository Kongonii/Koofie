<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="com.multicampus.kb03.weddingBuddy.repository.mybatis.mapper.PlannerMapper">

	<!-- <resultMap id="top3ResultMap" type="hashmap"> <result column="agency_name" 
		property="agency_name" /> <result column="intro" property="intro" /> <result 
		column="cnt" property="cnt" /> <result column="name" property="name" /> 필요한 
		필드들 추가 </resultMap> -->
	<!-- select Top3 출력, join -->
	<select id="selectTop3"
		resultType="com.multicampus.kb03.weddingBuddy.dto.Top3Vo">
		select rownum, P.planner_id as "_id", P.name as "name",
		R.cnt as "cnt", P.intro as "intro", A.name as "agency_name"
		from planner_account P, planner_agency A,
		(select planner_id, count(*) as cnt from planner_review group by planner_id )
		R
		where A.agency_id = P.agency_id and P.planner_id = R.planner_id
		and rownum <![CDATA[<=]]>3
		order by cnt desc
	</select>

	<!-- 플래너 회원가입, data insert -->
	<insert id="insert">
		insert into planner_account
		values(
		planner_seq.nextval, #{name}, #{password},
		#{phone}, #{email},
		#{agency_id}, #{intro}, #{account_id}
		)
	</insert>

	<!--플래너정보 수정, 플래너 아이디로 -->
	<update id="update">
		update planner_account
		set
		name = #{name},
		password =
		#{password},
		phone = #{phone},
		email = #{email},
		agency_id =
		#{agency_id},
		intro = #{intro},
		where planner_id = #{planner_id}
	</update>

	<!--회원정보 삭제 -->
	<update id="delete">
		delete from planner_account
		where planner_id =
		#{planner_id}
	</update>

	<!-- count -->
	<select id="count">
		select count(*)
		from planner_account
	</select>

	<!-- selectOne -->
	<select id="selectOne" parameterType="int"
		resultType="com.multicampus.kb03.weddingBuddy.dto.Planner">
		select *
		from planner_account
		where planner_id =
		#{planner_id}
	</select>

<!-- selectAll 전체 출력 -->
<select id="selectAll" resultType="com.multicampus.kb03.weddingBuddy.dto.Top3Vo">
  SELECT P.planner_id as "_id", P.name as "name", COALESCE(R.cnt, 0) as "cnt", P.intro as "intro", A.name as "agency_name"
  FROM planner_account P
  INNER JOIN planner_agency A ON P.agency_id = A.agency_id
  LEFT JOIN (SELECT planner_id, COUNT(*) as cnt FROM planner_review GROUP BY planner_id) R ON P.planner_id = R.planner_id
  ORDER BY cnt DESC
</select>
	<!-- 리뷰 작성 -->
	<insert id="insertReview"
		parameterType="com.multicampus.kb03.weddingBuddy.dto.Planner_Review">
		<selectKey keyProperty="review_id" resultType="int"
			order="BEFORE">
			SELECT review_seq.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO planner_review (review_id, planner_id, user_id, reg_date,
		content)
		VALUES (#{review_id}, #{planner_id}, #{user_id}, sysdate,
		#{content})
	</insert>


	<!-- 리뷰 detail 보기 -->
	<select id="getReviewDetail" parameterType="int"
		resultType="com.multicampus.kb03.weddingBuddy.dto.Planner_Review">
		SELECT *
		FROM Planner_Review
		WHERE planner_id = #{plannerId}
		ORDER BY reg_date DESC
	</select>


	<!-- 리뷰 이미지 등록 -->
	<insert id="saveReviewImage"
		parameterType="com.multicampus.kb03.weddingBuddy.dto.Review_Image">
		INSERT INTO Review_Image (Review_Image_ID, Review_ID,
		Image)
		VALUES (seq_review_image.nextval, #{review_id}, #{image})
	</insert>

	<!-- 리뷰 이미지 불러오기 -->
	<select id="getReviewImages" parameterType="int"
		resultType="com.multicampus.kb03.weddingBuddy.dto.Review_Image">
		SELECT * FROM Review_Image WHERE Review_ID = #{reviewId}
	</select>
	
	<!-- 유저 아이디로 유저네임 가져오기 -->
	<select id="getUserAccountName" parameterType="int"
		resultType="java.lang.String">
		SELECT CONCAT(SUBSTR(name, 1, 1), '**')
		FROM user_account
		WHERE user_id = #{userId}
	</select>
	
	
	<!-- searchByAd -->
<select id="searchByAd"  resultType="com.multicampus.kb03.weddingBuddy.dto.Top3Vo">
    SELECT P.planner_id as "_id", P.name as "name", P.intro as "intro", A.name as "agency_name"
    FROM planner_account P
    INNER JOIN planner_agency A 
    ON P.agency_id = A.agency_id
    WHERE A.address LIKE '%' || #{address} || '%'
</select>

<!-- searchByName -->
<select id="searchByName" resultType="com.multicampus.kb03.weddingBuddy.dto.Top3Vo">
    SELECT P.planner_id as "_id", P.name as "name", P.intro as "intro", A.name as "agency_name"
    FROM planner_account P
    INNER JOIN planner_agency A 
    ON P.agency_id = A.agency_id
    WHERE P.name LIKE '%' || #{name} || '%'
    </select>
    
<!-- searchByGroup -->
<select id="searchByGroup" resultType="com.multicampus.kb03.weddingBuddy.dto.Top3Vo">
    SELECT P.planner_id as "_id", P.name as "name", P.intro as "intro", A.name as "agency_name"
    FROM planner_account P
    INNER JOIN planner_agency A 
    ON P.agency_id = A.agency_id
    WHERE A.name LIKE '%' || #{agency} || '%'
    </select>
    
<!-- planner_like 테이블에 데이터 추가 -->
<insert id="insertPlannerLike" parameterType="map">
  INSERT INTO planner_like (user_id, planner_like_id, planner_id, isFavorite)
  VALUES (#{user_id}, planner_like_seq.nextval, #{plannerId}, #{isFavorite})
</insert>
    
    

    
    

    
    
    

    
    




	
	
	



</mapper>
